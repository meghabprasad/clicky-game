{"version":3,"sources":["components/FruitCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["FruitCard","props","react_default","a","createElement","className","onClick","handleClick","id","name","src","image","Wrapper","style","display","showGame","children","Title","count","topScore","message","Jumbotron","handleStart","App","state","fruits","clickedId","_this","setState","clickedIdCopy","console","log","includes","concat","tempCount","shuffledFruits","sort","Math","random","newClicked","push","newCount","length","_this2","this","components_Title","components_Jumbotron","components_Wrapper","map","fruit","components_FruitCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f87ae04.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FruitCard(props) {\n  return (\n    <div className=\"card\" onClick={() => props.handleClick(props.id, props.name)}>\n        <img src={props.image} />\n    </div>\n  );\n}\n\nexport default FruitCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\" style={{display: !props.showGame ? \"none\" : \"flex\"}}>{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return (\n    <div id=\"title\">\n      <div className = \"titleBar\">\n      <h1 className=\"title\">{props.children}</h1>\n      <div className=\"scoreDiv\">\n      <a className=\"score\">Current Count: {props.count} | </a>\n      <a className=\"score\">Top Score: {props.topScore}</a>\n      </div>\n      </div>\n      <div>\n      <a className=\"message\">{props.message}</a>\n      </div>\n    </div>\n    \n  )\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\"\n\nfunction Jumbotron (props){\n    return(\n        <div className=\"jumbotron\"\n            style={{display: props.showGame ? \"none\" : \"flex\"}}>\n            <div className=\"container\">\n            <h1>Click on all 12 fruits without clicking on any fruit more than once.</h1>\n            <button className=\"btn btn-success\"\n                onClick={props.handleStart}\n            >Start Game</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Jumbotron;","import React, { Component } from \"react\";\nimport FruitCard from \"./components/FruitCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport fruits from \"./fruits.json\";\nimport Jumbotron from \"./components/Jumbotron\";\n\nclass App extends Component {\n  // Setting this.state.fruits to the fruits json array\n  state = {\n    fruits,\n    clickedId: [],\n    message: \"\",\n    count: 0,\n    topScore: 0,\n    showGame: false\n  };\n\n  handleStart = () => {\n    this.setState({showGame: true});\n  }\n\n  handleClick = (id, name) => {\n\n    //check to see if they have clicked this card. \n      let clickedIdCopy = this.state.clickedId;\n      console.log(clickedIdCopy);\n\n      if (clickedIdCopy.includes(id)){\n        //If they have clicked, send message\n        this.setState({ message: `You already clicked ${name}. You lose`});\n        let tempCount = this.state.count;\n        this.setState({ topScore: tempCount});\n        this.setState({ count: 0 })\n        clickedIdCopy = [];\n        this.setState({ clickedId : clickedIdCopy });\n        let shuffledFruits = this.state.fruits.sort(() => Math.random() - 0.5);\n        this.setState({ shuffledFruits });\n      } \n        //else add the id of the card to the clickedId array\n\n      else {\n        const newClicked = this.state.clickedId;\n        newClicked.push(id);\n        this.setState({ clickedId: newClicked});\n        this.setState({ message: `You just clicked ${name}`});\n        let newCount = this.state.count + 1;\n        this.setState({count: newCount});\n        let shuffledFruits = this.state.fruits.sort(() => Math.random() - 0.5);\n        this.setState({ shuffledFruits });\n      }\n\n      if (clickedIdCopy.length === 12){\n        this.setState({ message: `You Won! Click any fruit to play again!`});\n        let tempCount = this.state.count + 1;\n        this.setState({ topScore: tempCount});\n        this.setState({ count: 0 })\n        clickedIdCopy = [];\n        this.setState({ clickedId : clickedIdCopy });\n        let shuffledFruits = this.state.fruits.sort(() => Math.random() - 0.5);\n        this.setState({ shuffledFruits });\n      }\n  }\n\n  // Map over this.state.fruits and render a fruitCard component for each fruit object\n  render() {\n    return (\n      <div>\n      <Title count={this.state.count} topScore={this.state.topScore} message={this.state.message}>Clicky Fruits</Title>\n      <Jumbotron handleStart={this.handleStart} showGame={this.state.showGame}/>\n      <Wrapper showGame = {this.state.showGame}>\n        {/* <h1>{this.state.message}</h1>\n        <h1>Current Count: {this.state.count}</h1>\n        <h1>Top Score: {this.state.topScore}</h1> */}\n        {this.state.fruits.map(fruit => (\n          <FruitCard\n            handleClick={this.handleClick}\n            id={fruit.id}\n            key={fruit.id}\n            image={fruit.image}\n            name={fruit.name}\n          />\n        ))}\n      </Wrapper>\n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();"],"sourceRoot":""}